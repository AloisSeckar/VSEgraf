// Main GUI window for VSEGRAF project
// 
// @author Alois Seckar [ ellrohir@seznam.cz ]
// @version 0.1
//
// Last modified: 2015-02-06 1835 GMT by Alois Seckar

package gui;

import db.DBHandler;
import db.KBEntry;
import db.DBUser;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.codec.digest.DigestUtils;

/**
 *
 * @author Ellrohir
 */
public class MainWin extends javax.swing.JFrame {
    
    private static final MainWin instance = new MainWin();
    
    private KBEntry currentKBEntry;
    
    private int currentUser = 0;

    /**
     * Creates new form MainWin
     */
    private MainWin() {
        initComponents();
        finalizeComponents();
    }
    
    public static MainWin getInstance() {
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidePanel = new javax.swing.JPanel();
        palettePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        paletteCategorySelect = new javax.swing.JComboBox();
        paletteElementsPanel = new javax.swing.JPanel();
        metadataPanel = new javax.swing.JPanel();
        metadataLabel = new javax.swing.JLabel();
        metadataLabelName = new javax.swing.JLabel();
        metadataLabelType = new javax.swing.JLabel();
        metadataLabelAuthor = new javax.swing.JLabel();
        metadataChangeButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JTabbedPane();
        canvasPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        canvasArea = new javax.swing.JPanel();
        kbPanel = new javax.swing.JPanel();
        kbIndexLabel = new javax.swing.JLabel();
        kbContentsTitle = new javax.swing.JLabel();
        kbContentsCategoryLabel = new javax.swing.JLabel();
        kbContentsCategory = new javax.swing.JLabel();
        kbContentsEditTitleButton = new javax.swing.JButton();
        kbIndexScrollPane = new javax.swing.JScrollPane();
        kbList = new javax.swing.JList();
        kbContentsScrollPane = new javax.swing.JScrollPane();
        kbContentsTextArea = new javax.swing.JTextArea();
        kbIndexRefreshButton = new javax.swing.JButton();
        kbContentsEditButton = new javax.swing.JButton();
        kbContentsSaveButton = new javax.swing.JButton();
        kbContentsNewButton = new javax.swing.JButton();
        kbContentsDeleteButton = new javax.swing.JButton();
        kbContentsUnsavedMarker = new javax.swing.JLabel();
        statusPanel = new javax.swing.JPanel();
        currentUserLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newGraphMenuItem = new javax.swing.JMenuItem();
        loadGraphMenuItem = new javax.swing.JMenuItem();
        saveGraphMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exportPNGMenuItem = new javax.swing.JMenuItem();
        exportPDFMenuItem = new javax.swing.JMenuItem();
        exportXMLMenuItem = new javax.swing.JMenuItem();
        exportTXTMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        userMenu = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        logoutMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        changeNameMenuItem = new javax.swing.JMenuItem();
        changePassMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        metadataMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        kbEntryMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        preferencesMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VSEGraf");

        sidePanel.setMaximumSize(null);
        sidePanel.setMinimumSize(null);
        sidePanel.setName(""); // NOI18N

        palettePanel.setBackground(new java.awt.Color(102, 102, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Palette");

        paletteCategorySelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Graph type 1", "Graph type 2", "Graph type 3" }));
        paletteCategorySelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paletteCategorySelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paletteElementsPanelLayout = new javax.swing.GroupLayout(paletteElementsPanel);
        paletteElementsPanel.setLayout(paletteElementsPanelLayout);
        paletteElementsPanelLayout.setHorizontalGroup(
            paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        paletteElementsPanelLayout.setVerticalGroup(
            paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout palettePanelLayout = new javax.swing.GroupLayout(palettePanel);
        palettePanel.setLayout(palettePanelLayout);
        palettePanelLayout.setHorizontalGroup(
            palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(palettePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paletteCategorySelect, 0, 140, Short.MAX_VALUE)
                    .addGroup(palettePanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(paletteElementsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        palettePanelLayout.setVerticalGroup(
            palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(palettePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paletteCategorySelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paletteElementsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        metadataPanel.setBackground(new java.awt.Color(153, 102, 255));

        metadataLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        metadataLabel.setText("Metadata");

        metadataLabelName.setText("Graph name");

        metadataLabelType.setText("Graph type");

        metadataLabelAuthor.setText("Graph author");

        metadataChangeButton.setText("Change");
        metadataChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadataChangeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout metadataPanelLayout = new javax.swing.GroupLayout(metadataPanel);
        metadataPanel.setLayout(metadataPanelLayout);
        metadataPanelLayout.setHorizontalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(metadataLabel)
                    .addComponent(metadataLabelName)
                    .addComponent(metadataLabelType)
                    .addComponent(metadataLabelAuthor)
                    .addComponent(metadataChangeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        metadataPanelLayout.setVerticalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(metadataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(metadataLabelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metadataLabelType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metadataLabelAuthor)
                .addGap(26, 26, 26)
                .addComponent(metadataChangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(metadataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(palettePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addComponent(palettePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metadataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(sidePanel, java.awt.BorderLayout.WEST);

        mainPanel.setBackground(new java.awt.Color(204, 0, 204));
        mainPanel.setMaximumSize(null);
        mainPanel.setMinimumSize(null);

        canvasArea.setBackground(new java.awt.Color(255, 255, 255));
        canvasArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout canvasAreaLayout = new javax.swing.GroupLayout(canvasArea);
        canvasArea.setLayout(canvasAreaLayout);
        canvasAreaLayout.setHorizontalGroup(
            canvasAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 943, Short.MAX_VALUE)
        );
        canvasAreaLayout.setVerticalGroup(
            canvasAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(canvasArea);
        canvasArea.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        );

        mainPanel.addTab("Graph Canvas", canvasPanel);

        kbIndexLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        kbIndexLabel.setText("Index");

        kbContentsTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        kbContentsTitle.setText("Page");

        kbContentsCategoryLabel.setText("Category:");

        kbContentsCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        kbContentsCategory.setText("Cat");

        kbContentsEditTitleButton.setText("Edit");
        kbContentsEditTitleButton.setEnabled(false);
        kbContentsEditTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsEditTitleButtonActionPerformed(evt);
            }
        });

        kbList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Index" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        kbIndexScrollPane.setViewportView(kbList);

        kbContentsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        kbContentsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        kbContentsTextArea.setEditable(false);
        kbContentsTextArea.setColumns(20);
        kbContentsTextArea.setLineWrap(true);
        kbContentsTextArea.setRows(5);
        kbContentsTextArea.setWrapStyleWord(true);
        kbContentsTextArea.setPreferredSize(null);
        kbContentsScrollPane.setViewportView(kbContentsTextArea);

        kbIndexRefreshButton.setText("Refresh");
        kbIndexRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbIndexRefreshButtonActionPerformed(evt);
            }
        });

        kbContentsEditButton.setText("Edit");
        kbContentsEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsEditButtonActionPerformed(evt);
            }
        });

        kbContentsSaveButton.setText("Save");
        kbContentsSaveButton.setEnabled(false);
        kbContentsSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsSaveButtonActionPerformed(evt);
            }
        });

        kbContentsNewButton.setText("New");
        kbContentsNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsNewButtonActionPerformed(evt);
            }
        });

        kbContentsDeleteButton.setText("Delete");
        kbContentsDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsDeleteButtonActionPerformed(evt);
            }
        });

        kbContentsUnsavedMarker.setForeground(new java.awt.Color(255, 0, 0));
        kbContentsUnsavedMarker.setText("Unsaved");

        javax.swing.GroupLayout kbPanelLayout = new javax.swing.GroupLayout(kbPanel);
        kbPanel.setLayout(kbPanelLayout);
        kbPanelLayout.setHorizontalGroup(
            kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(kbIndexLabel)
                    .addComponent(kbIndexRefreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kbIndexScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kbPanelLayout.createSequentialGroup()
                        .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kbPanelLayout.createSequentialGroup()
                                .addComponent(kbContentsTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsEditTitleButton)
                                .addGap(116, 116, 116)
                                .addComponent(kbContentsCategoryLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsCategory)
                                .addGap(0, 378, Short.MAX_VALUE))
                            .addGroup(kbPanelLayout.createSequentialGroup()
                                .addComponent(kbContentsEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsDeleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kbContentsUnsavedMarker)))
                        .addContainerGap())
                    .addComponent(kbContentsScrollPane)))
        );
        kbPanelLayout.setVerticalGroup(
            kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kbPanelLayout.createSequentialGroup()
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kbIndexLabel)
                    .addComponent(kbContentsTitle)
                    .addComponent(kbContentsEditTitleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsCategoryLabel)
                    .addComponent(kbContentsCategory))
                .addGap(4, 4, 4)
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kbContentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(kbIndexScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kbIndexRefreshButton)
                    .addComponent(kbContentsEditButton)
                    .addComponent(kbContentsSaveButton)
                    .addComponent(kbContentsNewButton)
                    .addComponent(kbContentsDeleteButton)
                    .addComponent(kbContentsUnsavedMarker))
                .addContainerGap())
        );

        mainPanel.addTab("Knowledge Base", kbPanel);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        currentUserLabel.setText("Anonymous");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap(863, Short.MAX_VALUE)
                .addComponent(currentUserLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentUserLabel)
                .addContainerGap())
        );

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");

        newGraphMenuItem.setText("New graph");
        newGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGraphMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newGraphMenuItem);

        loadGraphMenuItem.setText("Load graph");
        loadGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGraphMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadGraphMenuItem);

        saveGraphMenuItem.setText("Save graph");
        saveGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGraphMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveGraphMenuItem);
        fileMenu.add(jSeparator1);

        exportPNGMenuItem.setText("Export graph to PNG");
        exportPNGMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPNGMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportPNGMenuItem);

        exportPDFMenuItem.setText("Export graph to PDF");
        exportPDFMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPDFMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportPDFMenuItem);

        exportXMLMenuItem.setText("Export data to XML");
        exportXMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportXMLMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportXMLMenuItem);

        exportTXTMenuItem.setText("Export data to TXT");
        exportTXTMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTXTMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportTXTMenuItem);
        fileMenu.add(jSeparator2);

        exitMenuItem.setText("Exit program");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        userMenu.setText("User");

        loginMenuItem.setText("Login...");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(loginMenuItem);

        logoutMenuItem.setText("Logout...");
        logoutMenuItem.setEnabled(false);
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(logoutMenuItem);
        userMenu.add(jSeparator4);

        changeNameMenuItem.setText("Change display name");
        changeNameMenuItem.setEnabled(false);
        changeNameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNameMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(changeNameMenuItem);

        changePassMenuItem.setText("Change password");
        changePassMenuItem.setEnabled(false);
        changePassMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePassMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(changePassMenuItem);

        mainMenuBar.add(userMenu);

        editMenu.setText("Edit");

        metadataMenuItem.setText("Graph metadata");
        metadataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadataMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(metadataMenuItem);
        editMenu.add(jSeparator3);

        kbEntryMenuItem.setText("New KB entry");
        kbEntryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbEntryMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(kbEntryMenuItem);

        mainMenuBar.add(editMenu);

        optionsMenu.setText("Options");

        preferencesMenuItem.setText("Preferences");
        preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(preferencesMenuItem);

        mainMenuBar.add(optionsMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kbIndexRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbIndexRefreshButtonActionPerformed
        // GET ENTRIES FROM DB AND TURN THEM INTO LIST
        DefaultListModel listModel = new DefaultListModel();
        Iterator itr = DBHandler.getListOfObjects("from KBEntry");
        while (itr.hasNext()) {
            KBEntry current = (KBEntry)itr.next();
            // TODO implement listing by categories
            listModel.addElement(current.getEntryTitle());
        }
        kbList.setModel(listModel);
    }//GEN-LAST:event_kbIndexRefreshButtonActionPerformed

    private void kbContentsEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsEditButtonActionPerformed
        if (currentUser>0) {
            allowKBEdit(!kbContentsSaveButton.isEnabled());
        } else {
            throwNotLoggedInMessage();
        }
    }//GEN-LAST:event_kbContentsEditButtonActionPerformed

    private void kbContentsSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsSaveButtonActionPerformed
        if (currentUser>0) {
            // get edited values
            currentKBEntry.setEntryTitle(kbContentsTitle.getText());
            currentKBEntry.setEntryBody(kbContentsTextArea.getText());
            // update DB entry
            DBHandler.updateObject(currentKBEntry);
            // update items list as entry title might have changed
            kbIndexRefreshButtonActionPerformed(null);
            // clear unsaved changes gui markers
            markUnsavedChanges(false, false);
        } else {
            throwNotLoggedInMessage();
        }
    }//GEN-LAST:event_kbContentsSaveButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        ClosingAdapter adapter = new ClosingAdapter();
        adapter.windowClosing(null);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGraphMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_newGraphMenuItemActionPerformed

    private void loadGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGraphMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_loadGraphMenuItemActionPerformed

    private void saveGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGraphMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_saveGraphMenuItemActionPerformed

    private void exportPNGMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPNGMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_exportPNGMenuItemActionPerformed

    private void exportPDFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPDFMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_exportPDFMenuItemActionPerformed

    private void exportXMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportXMLMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_exportXMLMenuItemActionPerformed

    private void exportTXTMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTXTMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_exportTXTMenuItemActionPerformed

    private void metadataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadataMenuItemActionPerformed
        metadataChangeButtonActionPerformed(evt);
    }//GEN-LAST:event_metadataMenuItemActionPerformed

    private void kbEntryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbEntryMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_kbEntryMenuItemActionPerformed

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(instance, "VSEGraf\n"
                + "Simple Java graph designing tool for educational purposes\n\n"
                + "Authors: Alois Seckar, Tomas Skalicky\n\n"
                + "© 2015", 
                "VSEGraf", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void paletteCategorySelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletteCategorySelectActionPerformed
        paletteElementsPanel.removeAll();
        switch (paletteCategorySelect.getSelectedIndex()) {
            case 1:
                paletteElementsPanel.add(new JButton("Blue line"));
                paletteElementsPanel.add(new JButton("Blue dot"));
                paletteElementsPanel.add(new JButton("Blue rectangle"));
                break;
            case 2:
                paletteElementsPanel.add(new JButton("Red line"));
                paletteElementsPanel.add(new JButton("Red dot"));
                paletteElementsPanel.add(new JButton("Red rectangle"));
                break;
            default:
                paletteElementsPanel.add(new JButton("Black line"));
                paletteElementsPanel.add(new JButton("Black dot"));
                paletteElementsPanel.add(new JButton("Black rectangle"));
        }
        paletteElementsPanel.revalidate();
    }//GEN-LAST:event_paletteCategorySelectActionPerformed

    private void kbContentsEditTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsEditTitleButtonActionPerformed
        if (currentUser>0) {
            // inspired by:
            // http://stackoverflow.com/a/790224
            JTextField entryTitle = new JTextField(currentKBEntry.getEntryTitle());
            final JComponent[] inputs = new JComponent[] {
                new JLabel("Set title:"),
                entryTitle
            };
            JOptionPane.showMessageDialog(null, inputs, "VSEGraf - editing", 
                    JOptionPane.PLAIN_MESSAGE);
            //
            if (!currentKBEntry.getEntryTitle().equals(entryTitle.getText())) {
                currentKBEntry.setEntryTitle(entryTitle.getText());
                kbContentsTitle.setText(entryTitle.getText());
                // mark unsaved changes
                markUnsavedChanges(true, true);
            }
        } else {
            throwNotLoggedInMessage();
        }
    }//GEN-LAST:event_kbContentsEditTitleButtonActionPerformed

    private void kbContentsNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsNewButtonActionPerformed
        if (currentUser>0) {
            // create plain new entry and save it to db
            currentKBEntry = new KBEntry("New entry", "General", 
                    "Start typing contents...", currentUser);
            DBHandler.saveObject(currentKBEntry);
            // update gui elements with new values
            kbContentsTitle.setText(currentKBEntry.getEntryTitle());
            kbContentsCategory.setText(currentKBEntry.getEntryCat());
            kbContentsTextArea.setText(currentKBEntry.getEntryBody());
            // clear unsaved changes gui markers (initial entry was saved)
            markUnsavedChanges(false, false);
            // update items list
            kbIndexRefreshButtonActionPerformed(null);
            kbList.setSelectedIndex(kbList.getModel().getSize()-1);
            // allow editing if not enabled yet
            if (!kbContentsSaveButton.isEnabled()) {
                kbContentsEditButtonActionPerformed(evt);
            }
        } else {
            throwNotLoggedInMessage();
        }
    }//GEN-LAST:event_kbContentsNewButtonActionPerformed

    private void kbContentsDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsDeleteButtonActionPerformed
        if (currentUser>0) {
            if (showQuestionDialog("Do you really want to delete this?")==0) {
                // delete item itself
                DBHandler.deleteObject(currentKBEntry);
                // refresh item list
                kbIndexRefreshButtonActionPerformed(evt);
                kbList.setSelectedIndex(0);
                // clear gui
                kbContentsTitle.setText("Deleted");
                kbContentsCategory.setText("-");
                kbContentsTextArea.setText("Entry just deleted...");
                // clear unsaved changes gui markers
                markUnsavedChanges(false, false);
                // disallow changes for now
                // TODO how to disallow saving page as new entry?
                allowKBEdit(false);
            }
        } else {
            throwNotLoggedInMessage();
        }
    }//GEN-LAST:event_kbContentsDeleteButtonActionPerformed

    private void metadataChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadataChangeButtonActionPerformed
        JTextField metaName = new JTextField(metadataLabelName.getText());                                                  
        JTextField metaType = new JTextField(metadataLabelType.getText());                                                  
        JTextField metaAuthor = new JTextField(metadataLabelAuthor.getText());
        final JComponent[] inputs = new JComponent[] {
            new JLabel("Set graph name:"),
            metaName,
            new JLabel("Set graph type:"),
            metaType,
            new JLabel("Set graph author:"),
            metaAuthor
        };
        JOptionPane.showMessageDialog(instance, inputs, "VSEGraf - metadata", 
                JOptionPane.PLAIN_MESSAGE);
        //
        metadataLabelName.setText(metaName.getText()); 
        metadataLabelType.setText(metaType.getText());  
        metadataLabelAuthor.setText(metaAuthor.getText());  
    }//GEN-LAST:event_metadataChangeButtonActionPerformed

    private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
        loginAction();
    }//GEN-LAST:event_loginMenuItemActionPerformed

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        logoutAction();
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    private void changeNameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNameMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_changeNameMenuItemActionPerformed

    private void changePassMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassMenuItemActionPerformed
        notImplemeted();
    }//GEN-LAST:event_changePassMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel canvasArea;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JMenuItem changeNameMenuItem;
    private javax.swing.JMenuItem changePassMenuItem;
    private javax.swing.JLabel currentUserLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportPDFMenuItem;
    private javax.swing.JMenuItem exportPNGMenuItem;
    private javax.swing.JMenuItem exportTXTMenuItem;
    private javax.swing.JMenuItem exportXMLMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel kbContentsCategory;
    private javax.swing.JLabel kbContentsCategoryLabel;
    private javax.swing.JButton kbContentsDeleteButton;
    private javax.swing.JButton kbContentsEditButton;
    private javax.swing.JButton kbContentsEditTitleButton;
    private javax.swing.JButton kbContentsNewButton;
    private javax.swing.JButton kbContentsSaveButton;
    private javax.swing.JScrollPane kbContentsScrollPane;
    private javax.swing.JTextArea kbContentsTextArea;
    private javax.swing.JLabel kbContentsTitle;
    private javax.swing.JLabel kbContentsUnsavedMarker;
    private javax.swing.JMenuItem kbEntryMenuItem;
    private javax.swing.JLabel kbIndexLabel;
    private javax.swing.JButton kbIndexRefreshButton;
    private javax.swing.JScrollPane kbIndexScrollPane;
    private javax.swing.JList kbList;
    private javax.swing.JPanel kbPanel;
    private javax.swing.JMenuItem loadGraphMenuItem;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JTabbedPane mainPanel;
    private javax.swing.JButton metadataChangeButton;
    private javax.swing.JLabel metadataLabel;
    private javax.swing.JLabel metadataLabelAuthor;
    private javax.swing.JLabel metadataLabelName;
    private javax.swing.JLabel metadataLabelType;
    private javax.swing.JMenuItem metadataMenuItem;
    private javax.swing.JPanel metadataPanel;
    private javax.swing.JMenuItem newGraphMenuItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JComboBox paletteCategorySelect;
    private javax.swing.JPanel paletteElementsPanel;
    private javax.swing.JPanel palettePanel;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JMenuItem saveGraphMenuItem;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenu userMenu;
    // End of variables declaration//GEN-END:variables

    private void finalizeComponents() {
        // maximize window
        this.setExtendedState(Frame.MAXIMIZED_BOTH);
        // add window listener for closing
        // http://stackoverflow.com/questions/15449022
        this.addWindowListener(new ClosingAdapter());
        // application icon
        // inspired by http://stackoverflow.com/a/15657672
        File url = new File("images/favicon.png");
        try {
            ImageIcon icon = new ImageIcon(ImageIO.read(url));
            this.setIconImage(icon.getImage()); 
        } catch (Exception e) { 
            // TODO log error
        }
        
        // listener for kb items list browsing
        // http://stackoverflow.com/a/5609251
        MouseListener mouseListener = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // get currently selected index entry
                if (kbList.getSelectedIndex()<0) {
                    kbList.setSelectedIndex(0);
                }
                String selectedItem = (String) kbList.getSelectedValue();
                // load entry data from db
                currentKBEntry = (KBEntry)DBHandler
                        .getSingleObject("from KBEntry where entryTitle='" 
                                + selectedItem + "'");
                // fill gui elements with data
                kbContentsTitle.setText(currentKBEntry.getEntryTitle());
                kbContentsCategory.setText(currentKBEntry.getEntryCat());
                kbContentsTextArea.setText(currentKBEntry.getEntryBody());
                // clear unsaved changes gui markers
                markUnsavedChanges(false, false);
             }
        };
        kbList.addMouseListener(mouseListener); 
        
        // listener for kb contents body changes
        // any change occured - unsaved marker appears
        // http://stackoverflow.com/a/7740510
        kbContentsTextArea.getDocument().addDocumentListener(
                new DocumentListener() {
                @Override
                public void removeUpdate(DocumentEvent e) {
                    kbContentsUnsavedMarker.setVisible(true);
                }
                @Override
                public void insertUpdate(DocumentEvent e) {
                    kbContentsUnsavedMarker.setVisible(true);
                }
                @Override
                public void changedUpdate(DocumentEvent arg0) {
                    kbContentsUnsavedMarker.setVisible(true);
                }
            }
        );
        
        // refresh knowledge base list
        kbIndexRefreshButtonActionPerformed(null);
        // validate palette contents
        paletteElementsPanel.setLayout(new BoxLayout(paletteElementsPanel, 
                BoxLayout.Y_AXIS));
        paletteCategorySelectActionPerformed(null);
        // hide unsaved kb changes marker
        kbContentsUnsavedMarker.setVisible(false);
        // initally hide all kb editing buttons
        showKBEditingTools(false);
    }
    
    private void notImplemeted() {
        JOptionPane.showMessageDialog(instance, "Not implemented yet...", 
                "VSEGraf", JOptionPane.INFORMATION_MESSAGE);
    }

    private void throwNotLoggedInMessage() {
        JOptionPane.showMessageDialog(instance, "You are not logged in!", 
                    "VSEGraf - editing", JOptionPane.INFORMATION_MESSAGE);
    }

    private void loginAction() {
        // TODO log input
        JTextField userLogin = new JTextField();                                                  
        JTextField userPass = new JTextField();                               
        final JComponent[] inputs = new JComponent[] {
            new JLabel("Login:"),
            userLogin,
            new JLabel("Password:"),
            userPass
        };
        JOptionPane.showMessageDialog(instance, inputs, "VSEGraf - login", 
                JOptionPane.PLAIN_MESSAGE);
        // try to retrieve user under given xname from db
//        // test values
//        JTextField userLogin = new JTextField("xseca00");                                                  
//        JTextField userPass = new JTextField("heslo"); 
        Object obj = DBHandler.getSingleObject("FROM DBUser WHERE xname='" 
                + userLogin.getText() + "'");
        // test if user exists
        if (obj instanceof DBUser) {
            // get user data from db
            DBUser user = (DBUser)obj;
            // hash password input
            // http://stackoverflow.com/a/6706816/3204544
            String hPass = DigestUtils.sha1Hex(userPass.getText());
            // compare
            if (user.getUserPass().equals(hPass)) {
                // process login
                currentUser = user.getUserID();
                // show kb entry inputs and related menu options
                showKBEditingTools(true);
                allowLoginMenuOptions(true);
                // display user name at status bar
                currentUserLabel.setText(user.getUserName());
                currentUserLabel.setForeground(Color.GREEN);
                // TODO auto-update metadata
                // inform user
                JOptionPane.showMessageDialog(instance, "You are now logged in", 
                    "VSEGraf - login", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(instance, 
                     "Wrong login or password!", "VSEGraf - login", 
                     JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(instance, "Wrong login or password!", 
                    "VSEGraf - login", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void allowLoginMenuOptions(boolean allow) {
        loginMenuItem.setEnabled(!allow);
        logoutMenuItem.setEnabled(allow);
        changeNameMenuItem.setEnabled(allow);
        changePassMenuItem.setEnabled(allow);
    }

    private void logoutAction() {
        // process logout
        currentUser = 0;
        // hide kb entry inputs and related menu options
        showKBEditingTools(false);
        allowLoginMenuOptions(false);
        // clear user name from status bar
        currentUserLabel.setText("Anonymous");
        currentUserLabel.setForeground(Color.BLACK);
        // TODO autoupdate metadata
        // inform user
        JOptionPane.showMessageDialog(instance, "You are now logged out", 
            "VSEGraf - login", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private class ClosingAdapter extends WindowAdapter {
        @Override
        public void windowClosing(WindowEvent we) { 
            if (showQuestionDialog("Exit program?")==0) {
                System.exit(0);
            }
        }
    }
    
    private int showQuestionDialog(String question) {
        String ObjButtons[] = {"Yes", "No"};
        return JOptionPane.showOptionDialog(instance, question, "VSEGraf",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, 
                    null, ObjButtons, ObjButtons[1]);
    }
    
    private void allowKBEdit(boolean allow) {
        kbContentsSaveButton.setEnabled(allow);
        kbContentsEditTitleButton.setEnabled(allow);
        kbContentsTextArea.setEditable(allow);
        if (allow) {
            kbContentsEditButton.setText("Close");
        } else {
            kbContentsEditButton.setText("Edit");
        }
    }
    
    private void markUnsavedChanges(boolean unsTitle, boolean unsBody) {
        // unsaved title changes
        if (unsTitle) {
            kbContentsTitle.setForeground(Color.red);
        } else {
            kbContentsTitle.setForeground(Color.black);
        }
        // unsaved contents changes
        kbContentsUnsavedMarker.setVisible(unsBody);
    }
    
    private void showKBEditingTools(boolean show) {
        kbContentsEditButton.setVisible(show);
        kbContentsEditTitleButton.setVisible(show);
        kbContentsSaveButton.setVisible(show);
        kbContentsNewButton.setVisible(show);
        kbContentsDeleteButton.setVisible(show);
    }
}
