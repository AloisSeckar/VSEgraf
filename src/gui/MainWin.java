package gui;

import db.DBHandler;
import db.DBStats;
import db.KBEntry;
import db.DBUser;
import db.KBCat;
import gui.dialogs.UserManagement;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import logic.ConfigConstants;
import logic.user.LoginHandler;

/**
 * Main GUI window for VSEGRAF project.
 *
 * @author Alois Seckar [ ellrohir@seznam.cz ]
 * @version 0.1
 * @since 2015-03-07 12:02 GMT
 */
public class MainWin extends javax.swing.JFrame {
    
    // ************************** \\
    // *        CONSTANTS       * \\
    // ************************** \\

    // ************************** \\
    // *       PROPERTIES       * \\
    // ************************** \\

    /**
     * The only working instance of GUI MainWin.
     * Singleton pattern implementation.
     */
    private static final MainWin instance = new MainWin();

    /**
     * Information about current user.
     */
    private final LoginHandler currentLogin = new LoginHandler();

    /**
     * Information about currently browsed KB page.
     */
    private KBEntry currentKBEntry;

    /**
     * Information about currenlty viewed KB category.
     */
    private int currentCat = 1;
    
    // ************************** \\
    // *      CONSTRUCTORS      * \\
    // ************************** \\

    /**
     * Creates new GUI MainWin.
     */
    private MainWin() {
        initComponents();
        finalizeComponents();
    }
    
    // **************************** \\
    // * AUTOGEN NETBEANS METHODS * \\
    // **************************** \\

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidePanel = new javax.swing.JPanel();
        palettePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        paletteCategorySelect = new javax.swing.JComboBox();
        paletteElementsPanel = new javax.swing.JPanel();
        editorPalette1 = new gui.EditorPalette();
        editorPalette2 = new gui.EditorPalette();
        editorPalette3 = new gui.EditorPalette();
        metadataPanel = new javax.swing.JPanel();
        metadataLabel = new javax.swing.JLabel();
        metadataLabelName = new javax.swing.JLabel();
        metadataLabelType = new javax.swing.JLabel();
        metadataLabelAuthor = new javax.swing.JLabel();
        metadataChangeButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JTabbedPane();
        canvasPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        canvasArea = new javax.swing.JPanel();
        graphCanvas1 = new gui.GraphCanvas();
        kbPanel = new javax.swing.JPanel();
        kbCatLabel = new javax.swing.JLabel();
        kbContentsTitle = new javax.swing.JLabel();
        kbContentsEditTitleButton = new javax.swing.JButton();
        kbContentsLastEdit = new javax.swing.JLabel();
        kbContentsLastEditLabel = new javax.swing.JLabel();
        kbCatCBox = new javax.swing.JComboBox();
        kbIndexLabel = new javax.swing.JLabel();
        kbIndexScrollPane = new javax.swing.JScrollPane();
        kbList = new javax.swing.JList();
        kbContentsScrollPane = new javax.swing.JScrollPane();
        kbContentsTextArea = new javax.swing.JTextArea();
        kbIndexRefreshButton = new javax.swing.JButton();
        kbContentsEditButton = new javax.swing.JButton();
        kbContentsNewButton = new javax.swing.JButton();
        kbContentsSaveButton = new javax.swing.JButton();
        kbContentsDeleteButton = new javax.swing.JButton();
        kbContentsVersionsButton = new javax.swing.JButton();
        kbContentsCategoriesButton = new javax.swing.JButton();
        kbContentsUsersButton = new javax.swing.JButton();
        kbContentsUnsavedMarker = new javax.swing.JLabel();
        statusPanel = new javax.swing.JPanel();
        currentUserLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newGraphMenuItem = new javax.swing.JMenuItem();
        loadGraphMenuItem = new javax.swing.JMenuItem();
        saveGraphMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exportPNGMenuItem = new javax.swing.JMenuItem();
        exportPDFMenuItem = new javax.swing.JMenuItem();
        exportXMLMenuItem = new javax.swing.JMenuItem();
        exportTXTMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        userMenu = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        logoutMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        changeNameMenuItem = new javax.swing.JMenuItem();
        changePassMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        metadataMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        kbEntryMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        preferencesMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VSEGraf");
        getContentPane().setLayout(new java.awt.BorderLayout());

        sidePanel.setMaximumSize(null);
        sidePanel.setName(""); // NOI18N

        palettePanel.setBackground(new java.awt.Color(102, 102, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Palette");

        paletteCategorySelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Class diagram", "Use case diagram", "State chart diagram" }));
        paletteCategorySelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paletteCategorySelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paletteElementsPanelLayout = new javax.swing.GroupLayout(paletteElementsPanel);
        paletteElementsPanel.setLayout(paletteElementsPanelLayout);
        paletteElementsPanelLayout.setHorizontalGroup(
            paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorPalette1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
            .addGroup(paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(editorPalette2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
            .addGroup(paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(editorPalette3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
        );
        paletteElementsPanelLayout.setVerticalGroup(
            paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorPalette1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
            .addGroup(paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(editorPalette2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
            .addGroup(paletteElementsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(editorPalette3, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout palettePanelLayout = new javax.swing.GroupLayout(palettePanel);
        palettePanel.setLayout(palettePanelLayout);
        palettePanelLayout.setHorizontalGroup(
            palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(palettePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paletteCategorySelect, 0, 140, Short.MAX_VALUE)
                    .addGroup(palettePanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(paletteElementsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        palettePanelLayout.setVerticalGroup(
            palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(palettePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paletteCategorySelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paletteElementsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        metadataPanel.setBackground(new java.awt.Color(153, 102, 255));

        metadataLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        metadataLabel.setText("Metadata");

        metadataLabelName.setText("Graph name");

        metadataLabelType.setText("Graph type");

        metadataLabelAuthor.setText("Graph author");

        metadataChangeButton.setText("Change");
        metadataChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadataChangeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout metadataPanelLayout = new javax.swing.GroupLayout(metadataPanel);
        metadataPanel.setLayout(metadataPanelLayout);
        metadataPanelLayout.setHorizontalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(metadataLabel)
                    .addComponent(metadataLabelName)
                    .addComponent(metadataLabelType)
                    .addComponent(metadataLabelAuthor)
                    .addComponent(metadataChangeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        metadataPanelLayout.setVerticalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(metadataLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(metadataLabelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metadataLabelType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metadataLabelAuthor)
                .addGap(26, 26, 26)
                .addComponent(metadataChangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(metadataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(palettePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addComponent(palettePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metadataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(sidePanel, java.awt.BorderLayout.WEST);

        mainPanel.setBackground(new java.awt.Color(204, 0, 204));
        mainPanel.setMaximumSize(null);

        canvasArea.setBackground(new java.awt.Color(255, 255, 255));
        canvasArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout canvasAreaLayout = new javax.swing.GroupLayout(canvasArea);
        canvasArea.setLayout(canvasAreaLayout);
        canvasAreaLayout.setHorizontalGroup(
            canvasAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphCanvas1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
        );
        canvasAreaLayout.setVerticalGroup(
            canvasAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphCanvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(canvasArea);
        canvasArea.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
        );

        mainPanel.addTab("Graph Canvas", canvasPanel);

        kbCatLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        kbCatLabel.setText("Category");
        kbCatLabel.setMaximumSize(new java.awt.Dimension(80, 14));
        kbCatLabel.setMinimumSize(new java.awt.Dimension(80, 14));
        kbCatLabel.setPreferredSize(new java.awt.Dimension(80, 14));

        kbContentsTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        kbContentsTitle.setText("Page");

        kbContentsEditTitleButton.setText("Edit");
        kbContentsEditTitleButton.setEnabled(false);
        kbContentsEditTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsEditTitleButtonActionPerformed(evt);
            }
        });

        kbContentsLastEdit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        kbContentsLastEdit.setText("Name");

        kbContentsLastEditLabel.setText("Last edit:");

        kbCatCBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        kbCatCBox.setMaximumSize(new java.awt.Dimension(80, 23));
        kbCatCBox.setMinimumSize(new java.awt.Dimension(80, 23));
        kbCatCBox.setPreferredSize(new java.awt.Dimension(80, 23));
        kbCatCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbCatCBoxActionPerformed(evt);
            }
        });

        kbIndexLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        kbIndexLabel.setText("Index");

        kbList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Index" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        kbList.setMaximumSize(new java.awt.Dimension(80, 23));
        kbList.setMinimumSize(new java.awt.Dimension(80, 23));
        kbList.setPreferredSize(new java.awt.Dimension(80, 23));
        kbIndexScrollPane.setViewportView(kbList);

        kbContentsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        kbContentsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        kbContentsTextArea.setEditable(false);
        kbContentsTextArea.setColumns(20);
        kbContentsTextArea.setLineWrap(true);
        kbContentsTextArea.setRows(5);
        kbContentsTextArea.setWrapStyleWord(true);
        kbContentsTextArea.setPreferredSize(null);
        kbContentsScrollPane.setViewportView(kbContentsTextArea);

        kbIndexRefreshButton.setText("Refresh");
        kbIndexRefreshButton.setMaximumSize(new java.awt.Dimension(80, 23));
        kbIndexRefreshButton.setMinimumSize(new java.awt.Dimension(80, 23));
        kbIndexRefreshButton.setPreferredSize(new java.awt.Dimension(80, 23));
        kbIndexRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbIndexRefreshButtonActionPerformed(evt);
            }
        });

        kbContentsEditButton.setText("Edit");
        kbContentsEditButton.setMaximumSize(new java.awt.Dimension(85, 23));
        kbContentsEditButton.setMinimumSize(new java.awt.Dimension(85, 23));
        kbContentsEditButton.setPreferredSize(new java.awt.Dimension(85, 23));
        kbContentsEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsEditButtonActionPerformed(evt);
            }
        });

        kbContentsNewButton.setText("New");
        kbContentsNewButton.setMaximumSize(new java.awt.Dimension(85, 23));
        kbContentsNewButton.setMinimumSize(new java.awt.Dimension(85, 23));
        kbContentsNewButton.setPreferredSize(new java.awt.Dimension(85, 23));
        kbContentsNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsNewButtonActionPerformed(evt);
            }
        });

        kbContentsSaveButton.setText("Save");
        kbContentsSaveButton.setEnabled(false);
        kbContentsSaveButton.setMaximumSize(new java.awt.Dimension(85, 23));
        kbContentsSaveButton.setMinimumSize(new java.awt.Dimension(85, 23));
        kbContentsSaveButton.setPreferredSize(new java.awt.Dimension(85, 23));
        kbContentsSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsSaveButtonActionPerformed(evt);
            }
        });

        kbContentsDeleteButton.setText("Delete");
        kbContentsDeleteButton.setMaximumSize(new java.awt.Dimension(85, 23));
        kbContentsDeleteButton.setMinimumSize(new java.awt.Dimension(85, 23));
        kbContentsDeleteButton.setPreferredSize(new java.awt.Dimension(85, 23));
        kbContentsDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsDeleteButtonActionPerformed(evt);
            }
        });

        kbContentsVersionsButton.setText("Versions");
        kbContentsVersionsButton.setMaximumSize(new java.awt.Dimension(85, 23));
        kbContentsVersionsButton.setMinimumSize(new java.awt.Dimension(85, 23));
        kbContentsVersionsButton.setPreferredSize(new java.awt.Dimension(85, 23));
        kbContentsVersionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsVersionsButtonActionPerformed(evt);
            }
        });

        kbContentsCategoriesButton.setText("Categories");
        kbContentsCategoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsCategoriesButtonActionPerformed(evt);
            }
        });

        kbContentsUsersButton.setText("Users");
        kbContentsUsersButton.setMaximumSize(new java.awt.Dimension(85, 23));
        kbContentsUsersButton.setMinimumSize(new java.awt.Dimension(85, 23));
        kbContentsUsersButton.setPreferredSize(new java.awt.Dimension(85, 23));
        kbContentsUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbContentsUsersButtonActionPerformed(evt);
            }
        });

        kbContentsUnsavedMarker.setForeground(new java.awt.Color(255, 0, 0));
        kbContentsUnsavedMarker.setText("Unsaved");

        javax.swing.GroupLayout kbPanelLayout = new javax.swing.GroupLayout(kbPanel);
        kbPanel.setLayout(kbPanelLayout);
        kbPanelLayout.setHorizontalGroup(
            kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kbPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kbCatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbCatCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbIndexLabel)
                    .addComponent(kbIndexScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbIndexRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kbPanelLayout.createSequentialGroup()
                        .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(kbContentsTitle)
                            .addComponent(kbContentsEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(kbPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(kbContentsNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsVersionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsCategoriesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsUsersButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                                .addComponent(kbContentsUnsavedMarker))
                            .addGroup(kbPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsEditTitleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(kbContentsLastEditLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kbContentsLastEdit))))
                    .addComponent(kbContentsScrollPane))
                .addContainerGap())
        );
        kbPanelLayout.setVerticalGroup(
            kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kbPanelLayout.createSequentialGroup()
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kbContentsTitle)
                    .addComponent(kbContentsEditTitleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsLastEditLabel)
                    .addComponent(kbContentsLastEdit)
                    .addComponent(kbCatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kbPanelLayout.createSequentialGroup()
                        .addComponent(kbCatCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kbIndexLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kbIndexScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
                    .addComponent(kbContentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(kbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kbContentsUnsavedMarker)
                    .addComponent(kbContentsUsersButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsCategoriesButton)
                    .addComponent(kbIndexRefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsDeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kbContentsVersionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        mainPanel.addTab("Knowledge Base", kbPanel);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        currentUserLabel.setText("Anonymous");

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap(962, Short.MAX_VALUE)
                .addComponent(currentUserLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentUserLabel)
                .addContainerGap())
        );

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");

        newGraphMenuItem.setText("New graph");
        newGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGraphMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newGraphMenuItem);

        loadGraphMenuItem.setText("Load graph");
        loadGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGraphMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadGraphMenuItem);

        saveGraphMenuItem.setText("Save graph");
        saveGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGraphMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveGraphMenuItem);
        fileMenu.add(jSeparator1);

        exportPNGMenuItem.setText("Export graph to PNG");
        exportPNGMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPNGMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportPNGMenuItem);

        exportPDFMenuItem.setText("Export graph to PDF");
        exportPDFMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPDFMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportPDFMenuItem);

        exportXMLMenuItem.setText("Export data to XML");
        exportXMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportXMLMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportXMLMenuItem);

        exportTXTMenuItem.setText("Export data to TXT");
        exportTXTMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTXTMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportTXTMenuItem);
        fileMenu.add(jSeparator2);

        exitMenuItem.setText("Exit program");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        userMenu.setText("User");

        loginMenuItem.setText("Login...");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(loginMenuItem);

        logoutMenuItem.setText("Logout...");
        logoutMenuItem.setEnabled(false);
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(logoutMenuItem);
        userMenu.add(jSeparator4);

        changeNameMenuItem.setText("Change display name");
        changeNameMenuItem.setEnabled(false);
        changeNameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNameMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(changeNameMenuItem);

        changePassMenuItem.setText("Change password");
        changePassMenuItem.setEnabled(false);
        changePassMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePassMenuItemActionPerformed(evt);
            }
        });
        userMenu.add(changePassMenuItem);

        mainMenuBar.add(userMenu);

        editMenu.setText("Edit");

        metadataMenuItem.setText("Graph metadata");
        metadataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadataMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(metadataMenuItem);
        editMenu.add(jSeparator3);

        kbEntryMenuItem.setText("New KB entry");
        kbEntryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kbEntryMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(kbEntryMenuItem);

        mainMenuBar.add(editMenu);

        optionsMenu.setText("Options");

        preferencesMenuItem.setText("Preferences");
        preferencesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(preferencesMenuItem);

        mainMenuBar.add(optionsMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kbIndexRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbIndexRefreshButtonActionPerformed
        getListOfKBEntries();
    }//GEN-LAST:event_kbIndexRefreshButtonActionPerformed

    private void kbContentsEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsEditButtonActionPerformed
        if (currentLogin.isLoggedIn()) {
            allowKBEdit(!kbContentsSaveButton.isEnabled());
        } else {
            GUIAux.throwNotLoggedInMessage(instance);
        }
    }//GEN-LAST:event_kbContentsEditButtonActionPerformed

    private void kbContentsSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsSaveButtonActionPerformed
        if (currentLogin.isLoggedIn()) {
            // HANDLE DB CHANGES
            // set new entry and save it into db
            KBEntry newEntry = new KBEntry(currentKBEntry.getKbOrigID(),
                    kbContentsTitle.getText(), currentKBEntry.getEntryCat(),
                    kbContentsTextArea.getText(), currentLogin.getUserID(), 1);
            DBHandler.saveObject(newEntry);
            // make currently edited entry version invalid
            currentKBEntry.setEntryValid(0);
            DBHandler.updateObject(currentKBEntry);
            // HANDLE GUI CHANGES
            // update items list as entry title might have changed
            kbIndexRefreshButtonActionPerformed(null);
            // update last editor label
            kbContentsLastEdit.setText(currentUserLabel.getText());
            // clear unsaved changes gui markers
            markUnsavedChanges(false, false);
        } else {
            GUIAux.throwNotLoggedInMessage(instance);
        }
    }//GEN-LAST:event_kbContentsSaveButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        ClosingAdapter adapter = new ClosingAdapter();
        adapter.windowClosing(null);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGraphMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_newGraphMenuItemActionPerformed

    private void loadGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGraphMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_loadGraphMenuItemActionPerformed

    private void saveGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGraphMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_saveGraphMenuItemActionPerformed

    private void exportPNGMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPNGMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_exportPNGMenuItemActionPerformed

    private void exportPDFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPDFMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_exportPDFMenuItemActionPerformed

    private void exportXMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportXMLMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_exportXMLMenuItemActionPerformed

    private void exportTXTMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTXTMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_exportTXTMenuItemActionPerformed

    private void metadataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadataMenuItemActionPerformed
        metadataChangeButtonActionPerformed(evt);
    }//GEN-LAST:event_metadataMenuItemActionPerformed

    private void kbEntryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbEntryMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_kbEntryMenuItemActionPerformed

    private void preferencesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_preferencesMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(instance, "VSEGraf\n"
                + "Simple Java graph designing tool for educational purposes\n\n"
                + "Authors: Alois Seckar, Tomas Skalicky\n\n"
                + "© 2015",
                "VSEGraf", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void paletteCategorySelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletteCategorySelectActionPerformed
 
        switch (paletteCategorySelect.getSelectedIndex()) {
            case 1:
                editorPalette1.setVisible(false);
                editorPalette2.setVisible(true);
                editorPalette3.setVisible(false);
                
                break;
            case 2:
                editorPalette1.setVisible(false);
                editorPalette2.setVisible(false);
                editorPalette3.setVisible(true);
                break;
            default:
                /*paletteElementsPanel.add(new JButton("Black line"));
                paletteElementsPanel.add(new JButton("Black dot"));
                paletteElementsPanel.add(new JButton("Black rectangle"));*/
                editorPalette1.setVisible(true);
                editorPalette2.setVisible(false);
                editorPalette3.setVisible(false);
        }
        editorPalette1.revalidate();
        editorPalette2.revalidate();
        editorPalette3.revalidate();
    }//GEN-LAST:event_paletteCategorySelectActionPerformed

    private void kbContentsEditTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsEditTitleButtonActionPerformed
        if (currentLogin.isLoggedIn()) {
            // show dialog that allows renaming
            // inspired by:
            // http://stackoverflow.com/a/790224
            JTextField entryTitle = new JTextField(currentKBEntry.getEntryTitle());
            final JComponent[] inputs = new JComponent[]{
                new JLabel("Set title:"),
                entryTitle
            };
            JOptionPane.showMessageDialog(null, inputs, "VSEGraf - editing",
                    JOptionPane.PLAIN_MESSAGE);
            // if entry name was changed
            if (!currentKBEntry.getEntryTitle().equals(entryTitle.getText())) {
                // check if name is unique among current entries
                // TODO name must be unique within category
                // TODO name must be uniquea among active versions (?)
                if (DBHandler.countRows("FROM KBEntry WHERE title='"
                        + entryTitle.getText() + "' AND valid='1' AND orig_id<>'"
                        + currentKBEntry.getKbOrigID() + "'") < 1) {
//                    // do NOT change the object itself yet!
//                    currentKBEntry.setEntryTitle(entryTitle.getText());
                    kbContentsTitle.setText(entryTitle.getText());
                    // mark unsaved changes
                    markUnsavedChanges(true, true);
                } else {
                    JOptionPane.showMessageDialog(instance, "Name not unique!",
                            "VSEGraf - metadata", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            GUIAux.throwNotLoggedInMessage(instance);
        }
    }//GEN-LAST:event_kbContentsEditTitleButtonActionPerformed

    private void kbContentsNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsNewButtonActionPerformed
        if (currentLogin.isLoggedIn()) {
            // construct new orig_id for brand new db entry
            DBStats origEntries = (DBStats) DBHandler.getSingleObject(
                    "FROM DBStats WHERE key='orig_entries'");
            int newID = origEntries.getStatsValue() + 1;
            origEntries.setStatsValue(newID);
            DBHandler.updateObject(origEntries); // save new value for future
            // create plain new entry and save it to db
            currentKBEntry = new KBEntry(newID, "New entry", currentCat,
                    "Start typing contents...", currentLogin.getUserID(), 1);
            DBHandler.saveObject(currentKBEntry);
            // update gui elements with new values
            kbContentsTitle.setText(currentKBEntry.getEntryTitle());
            kbContentsTextArea.setText(currentKBEntry.getEntryBody());
            // clear unsaved changes gui markers (initial entry was saved)
            markUnsavedChanges(false, false);
            // update items list
            kbIndexRefreshButtonActionPerformed(null);
            kbList.setSelectedIndex(kbList.getModel().getSize() - 1);
            // allow editing if not enabled yet
            if (!kbContentsSaveButton.isEnabled()) {
                kbContentsEditButtonActionPerformed(evt);
            }
        } else {
            GUIAux.throwNotLoggedInMessage(instance);
        }
    }//GEN-LAST:event_kbContentsNewButtonActionPerformed

    private void kbContentsDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsDeleteButtonActionPerformed
        if (currentLogin.isLoggedIn()) {
            if (GUIAux.showQuestionDialog(instance, 
                    "Do you really want to delete this?") == 0) {
                // delete item itself
                DBHandler.deleteObject(currentKBEntry);
                // refresh item list
                kbIndexRefreshButtonActionPerformed(evt);
                kbList.setSelectedIndex(0);
                // clear gui
                kbContentsTitle.setText("Deleted");
                kbContentsTextArea.setText("Entry just deleted...");
                // clear unsaved changes gui markers
                markUnsavedChanges(false, false);
                // disallow changes for now
                // TODO how to disallow saving page as new entry?
                allowKBEdit(false);
            }
        } else {
            GUIAux.throwNotLoggedInMessage(instance);
        }
    }//GEN-LAST:event_kbContentsDeleteButtonActionPerformed

    private void metadataChangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadataChangeButtonActionPerformed
        JTextField metaName = new JTextField(metadataLabelName.getText());
        JTextField metaType = new JTextField(metadataLabelType.getText());
        JTextField metaAuthor = new JTextField(metadataLabelAuthor.getText());
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Set graph name:"),
            metaName,
            new JLabel("Set graph type:"),
            metaType,
            new JLabel("Set graph author:"),
            metaAuthor
        };
        JOptionPane.showMessageDialog(instance, inputs, "VSEGraf - metadata",
                JOptionPane.PLAIN_MESSAGE);
        //
        metadataLabelName.setText(metaName.getText());
        metadataLabelType.setText(metaType.getText());
        metadataLabelAuthor.setText(metaAuthor.getText());
    }//GEN-LAST:event_metadataChangeButtonActionPerformed

    private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
        loginAction();
    }//GEN-LAST:event_loginMenuItemActionPerformed

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        logoutAction();
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    private void changeNameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNameMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_changeNameMenuItemActionPerformed

    private void changePassMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassMenuItemActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_changePassMenuItemActionPerformed

    private void kbCatCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbCatCBoxActionPerformed
        // get selected KBCat id
        KBCat entryCat = (KBCat) DBHandler.getSingleObject("FROM KBCat WHERE "
                + "name='" + kbCatCBox.getSelectedItem().toString() + "'");
        // set selected KBCat id
        currentCat = entryCat.getCatID();
        // reload entries in category
        kbIndexRefreshButtonActionPerformed(evt);
    }//GEN-LAST:event_kbCatCBoxActionPerformed

    private void kbContentsVersionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsVersionsButtonActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_kbContentsVersionsButtonActionPerformed

    private void kbContentsCategoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsCategoriesButtonActionPerformed
        GUIAux.throwNotImplemetedMessage(instance);
    }//GEN-LAST:event_kbContentsCategoriesButtonActionPerformed

    private void kbContentsUsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kbContentsUsersButtonActionPerformed
        UserManagement uMan = new UserManagement(instance, true);
        uMan.setVisible(true);
    }//GEN-LAST:event_kbContentsUsersButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel canvasArea;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JMenuItem changeNameMenuItem;
    private javax.swing.JMenuItem changePassMenuItem;
    private javax.swing.JLabel currentUserLabel;
    private javax.swing.JMenu editMenu;
    private gui.EditorPalette editorPalette1;
    private gui.EditorPalette editorPalette2;
    private gui.EditorPalette editorPalette3;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportPDFMenuItem;
    private javax.swing.JMenuItem exportPNGMenuItem;
    private javax.swing.JMenuItem exportTXTMenuItem;
    private javax.swing.JMenuItem exportXMLMenuItem;
    private javax.swing.JMenu fileMenu;
    private gui.GraphCanvas graphCanvas1;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JComboBox kbCatCBox;
    private javax.swing.JLabel kbCatLabel;
    private javax.swing.JButton kbContentsCategoriesButton;
    private javax.swing.JButton kbContentsDeleteButton;
    private javax.swing.JButton kbContentsEditButton;
    private javax.swing.JButton kbContentsEditTitleButton;
    private javax.swing.JLabel kbContentsLastEdit;
    private javax.swing.JLabel kbContentsLastEditLabel;
    private javax.swing.JButton kbContentsNewButton;
    private javax.swing.JButton kbContentsSaveButton;
    private javax.swing.JScrollPane kbContentsScrollPane;
    private javax.swing.JTextArea kbContentsTextArea;
    private javax.swing.JLabel kbContentsTitle;
    private javax.swing.JLabel kbContentsUnsavedMarker;
    private javax.swing.JButton kbContentsUsersButton;
    private javax.swing.JButton kbContentsVersionsButton;
    private javax.swing.JMenuItem kbEntryMenuItem;
    private javax.swing.JLabel kbIndexLabel;
    private javax.swing.JButton kbIndexRefreshButton;
    private javax.swing.JScrollPane kbIndexScrollPane;
    private javax.swing.JList kbList;
    private javax.swing.JPanel kbPanel;
    private javax.swing.JMenuItem loadGraphMenuItem;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JTabbedPane mainPanel;
    private javax.swing.JButton metadataChangeButton;
    private javax.swing.JLabel metadataLabel;
    private javax.swing.JLabel metadataLabelAuthor;
    private javax.swing.JLabel metadataLabelName;
    private javax.swing.JLabel metadataLabelType;
    private javax.swing.JMenuItem metadataMenuItem;
    private javax.swing.JPanel metadataPanel;
    private javax.swing.JMenuItem newGraphMenuItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JComboBox paletteCategorySelect;
    private javax.swing.JPanel paletteElementsPanel;
    private javax.swing.JPanel palettePanel;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JMenuItem saveGraphMenuItem;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenu userMenu;
    // End of variables declaration//GEN-END:variables

    // ************************** \\
    // *     PUBLIC METHODS     * \\
    // ************************** \\

    /**
     * Returns the only existing instance of MainWin. Singleton pattern
     * implementation.
     *
     * @return working instance of MainWin GUI class.
     */
    public static MainWin getInstance() {
        return instance;
    }

    // ************************** \\
    // *    PRIVATE METHODS     * \\
    // ************************** \\
    
    private void finalizeComponents() {
        // maximize window
        this.setExtendedState(Frame.MAXIMIZED_BOTH);
        // add window listener for closing
        // http://stackoverflow.com/questions/15449022
        this.addWindowListener(new ClosingAdapter());
        // application icon
        // inspired by http://stackoverflow.com/a/15657672
        File url = new File("images/favicon.png");
        try {
            ImageIcon icon = new ImageIcon(ImageIO.read(url));
            this.setIconImage(icon.getImage());
        } catch (Exception e) {
            // TODO log error
        }

        // listener for kb items list browsing
        // http://stackoverflow.com/a/5609251
        MouseListener mouseListener = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // get currently selected index entry
                if (kbList.getSelectedIndex() < 0) {
                    kbList.setSelectedIndex(0);
                }
                String selectedItem = (String) kbList.getSelectedValue();
                // load entry data from db
                currentKBEntry = (KBEntry) DBHandler
                        .getSingleObject("FROM KBEntry WHERE entryTitle='"
                                + selectedItem + "'");
                // fill gui elements with data
                kbContentsTitle.setText(currentKBEntry.getEntryTitle());
                kbContentsTextArea.setText(currentKBEntry.getEntryBody());
                // last editor (enrty author)
                DBUser lastEditor = (DBUser) DBHandler.getSingleObject(
                        "FROM DBUser WHERE id='"
                        + currentKBEntry.getEntryAuthor() + "'");
                try {
                    kbContentsLastEdit.setText(lastEditor.getUserName());
                } catch (Exception ex) {
                    kbContentsLastEdit.setText("UNKNOWN");
                }
                // clear unsaved changes gui markers
                markUnsavedChanges(false, false);
            }
        };
        kbList.addMouseListener(mouseListener);

        // listener for kb contents body changes
        // any change occured - unsaved marker appears
        // http://stackoverflow.com/a/7740510
        kbContentsTextArea.getDocument().addDocumentListener(
                new DocumentListener() {
                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        kbContentsUnsavedMarker.setVisible(true);
                    }

                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        kbContentsUnsavedMarker.setVisible(true);
                    }

                    @Override
                    public void changedUpdate(DocumentEvent arg0) {
                        kbContentsUnsavedMarker.setVisible(true);
                    }
                }
        );

        // fill categories combo box
        // GET ENTRIES FROM DB AND TURN THEM INTO LIST 
        DefaultComboBoxModel listModel = new DefaultComboBoxModel();
        Iterator itr = DBHandler.getListOfObjects("FROM KBCat ORDER BY ord");
        while (itr.hasNext()) {
            KBCat current = (KBCat) itr.next();
            listModel.addElement(current.getCatName());
        }
        // SET THIS LIST FOR INDEX OF ENTRIES
        kbCatCBox.setModel(listModel);

        // refresh knowledge base list
        kbIndexRefreshButtonActionPerformed(null);
        // validate palette contents
        paletteElementsPanel.setLayout(new BoxLayout(paletteElementsPanel,
                BoxLayout.Y_AXIS));
        paletteCategorySelectActionPerformed(null);
        // hide unsaved kb changes marker
        kbContentsUnsavedMarker.setVisible(false);
        // initally hide all kb editing buttons
        showKBEditingTools(false);
        
        // set palettes buttons
        editorPalette1
				.addTemplate(
						"Class",
						new ImageIcon(
								MainWin.class
										.getResource("/graf/resources/rectangle.png")),
						null, 100, 80, "");
        
        
        editorPalette2
                        .addTemplate(
						"Actor",
						new ImageIcon(
								MainWin.class
										.getResource("/graf/resources/actor.png")),
						"shape=actor", 60, 80, "");
        editorPalette2
                        .addTemplate(
						"Case",
						new ImageIcon(
								MainWin.class
										.getResource("/graf/resources/ellipse.png")),
						"ellipse", 100, 60, "");
        editorPalette3
				.addTemplate(
						"Start point",
						new ImageIcon(
								MainWin.class
										.getResource("/graf/resources/start.png")),
						"roundImage;image=/graf/resources/start.png",
						40, 40, "");
        editorPalette3
                        .addTemplate(
						"State",
						new ImageIcon(
								MainWin.class
										.getResource("/graf/resources/rounded.png")),
						"rounded=1", 100, 60, "");
        editorPalette3
                        .addTemplate(
						"End point",
						new ImageIcon(
								MainWin.class
										.getResource("/graf/resources/terminate.png")),
						"roundImage;image=/graf/resources/terminate.png",
						40, 40, "");
    }

    private void loginAction() {
        // TODO log input
        JTextField userLogin = new JTextField("root"); //TODO delete                                                  
        JPasswordField userPass = new JPasswordField("toor");
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Login:"),
            userLogin,
            new JLabel("Password:"),
            userPass
        };
        JOptionPane.showMessageDialog(instance, inputs, "VSEGraf - login",
                JOptionPane.PLAIN_MESSAGE);
        // try to retrieve user under given xname from db
        if (currentLogin.login(userLogin.getText(), userPass.getText()) == 0) {
            // show kb entry inputs and related menu options
            showKBEditingTools(true);
            allowLoginMenuOptions(true);
            // display user name at status bar
            currentUserLabel.setText(currentLogin.getUserName());
            currentUserLabel.setForeground(Color.GREEN);
            // TODO auto-update metadata
            // inform user
            JOptionPane.showMessageDialog(instance, "You are now logged in",
                    "VSEGraf - login", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(instance, "Wrong login or password!",
                    "VSEGraf - login", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void logoutAction() {
        // process logout
        currentLogin.logout();
        // hide kb entry inputs and related menu options
        showKBEditingTools(false);
        allowLoginMenuOptions(false);
        // clear user name from status bar
        currentUserLabel.setText("Anonymous");
        currentUserLabel.setForeground(Color.BLACK);
        // TODO autoupdate metadata
        // inform user
        JOptionPane.showMessageDialog(instance, "You are now logged out",
                "VSEGraf - login", JOptionPane.INFORMATION_MESSAGE);
    }

    private void getListOfKBEntries() {
        // GET ENTRIES FROM DB AND TURN THEM INTO LIST 
        DefaultListModel listModel = new DefaultListModel();
        Iterator itr = DBHandler.getListOfObjects("FROM KBEntry WHERE valid='1'"
                + " AND cat='" + currentCat + "'");
        while (itr.hasNext()) {
            KBEntry current = (KBEntry) itr.next();
            listModel.addElement(current.getEntryTitle());
        }
        // SET THIS LIST FOR INDEX OF ENTRIES
        kbList.setModel(listModel);
    }
    
    private void allowLoginMenuOptions(boolean allow) {
        loginMenuItem.setEnabled(!allow);
        logoutMenuItem.setEnabled(allow);
        changeNameMenuItem.setEnabled(allow);
        changePassMenuItem.setEnabled(allow);
    }

    private void showKBEditingTools(boolean show) {
        kbContentsEditButton.setVisible(show);
        kbContentsEditTitleButton.setVisible(show);
        kbContentsSaveButton.setVisible(show);
        kbContentsNewButton.setVisible(show);
        kbContentsDeleteButton.setVisible(show);
        // get current user level
        int level = currentLogin.getUserLevel();
        // some options are only visible for mods
        if (level >= ConfigConstants.USER_MOD) {
            kbContentsVersionsButton.setVisible(show);
        } else {
            kbContentsVersionsButton.setVisible(false);
        }
        // some options are only visible for admins
        if (level >= ConfigConstants.USER_ADMIN) {
            kbContentsCategoriesButton.setVisible(show);
            kbContentsUsersButton.setVisible(show);
        } else {
            kbContentsCategoriesButton.setVisible(false);
            kbContentsUsersButton.setVisible(false);
        }
    } 
    
    private void allowKBEdit(boolean allow) {
        kbContentsSaveButton.setEnabled(allow);
        kbContentsEditTitleButton.setEnabled(allow);
        kbContentsTextArea.setEditable(allow);
        if (allow) {
            kbContentsEditButton.setText("Close");
        } else {
            kbContentsEditButton.setText("Edit");
        }
    }

    private void markUnsavedChanges(boolean unsTitle, boolean unsBody) {
        // unsaved title changes
        if (unsTitle) {
            kbContentsTitle.setForeground(Color.red);
        } else {
            kbContentsTitle.setForeground(Color.black);
        }
        // unsaved contents changes
        kbContentsUnsavedMarker.setVisible(unsBody);
    }
    
    // ************************** \\
    // *     INNER CLASSES      * \\
    // ************************** \\

    /**
     * Class for displaying question prompt upon exiting program.
     */
    private class ClosingAdapter extends WindowAdapter {
        @Override
        public void windowClosing(WindowEvent we) {
            if (GUIAux.showQuestionDialog(instance, "Exit program?") == 0) {
                System.exit(0);
            }
        }
    }
}
