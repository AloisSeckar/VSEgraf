package gui.dialogs;

import db.DBHandler;
import db.KBEntry;
import gui.GUIAux;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import logic.LogicAux;

/**
 * GUI for KB entries versions management for VSEGRAF project.
 * 
 * @author Alois Seckar [ ellrohir@seznam.cz ]
 * @version 0.1
 * @since 2015-04-12 11:17 GMT+1
 */
public class VersionManagement extends javax.swing.JDialog {
    
    /**
     * ID of currently edited kb entry.
     * This id is same for all existing version of same item.
     * We fetch all such records from db to manage them.
     */
    int origID = 0;
    
    /**
     * Currently viewed kb entry version.
     */
    KBEntry currentEntry = null;

    /**
     * Creates new form UserManagement
     * @param parent
     * @param modal
     */
    public VersionManagement(java.awt.Frame parent, boolean modal, int origID) {
        super(parent, modal);
        initComponents();
        finalizeComponents();
        this.origID = origID;
        getVersionList(this.origID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        versionListLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        versionList = new javax.swing.JList();
        versionDetailsLabel = new javax.swing.JLabel();
        versionEntryIDLabel = new javax.swing.JLabel();
        versionEntryID = new javax.swing.JLabel();
        versionIDLabel = new javax.swing.JLabel();
        versionID = new javax.swing.JLabel();
        versionCreatedLabel = new javax.swing.JLabel();
        versionCreated = new javax.swing.JLabel();
        versionAuthorLabel = new javax.swing.JLabel();
        versionAuthor = new javax.swing.JLabel();
        versionTitleLabel = new javax.swing.JLabel();
        versionTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        versionContents = new javax.swing.JTextArea();
        versionStatusLabel = new javax.swing.JLabel();
        versionStatus = new javax.swing.JLabel();
        setActiveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        jButton2.setText("Set active");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        versionListLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionListLabel.setText("VERSIONS");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        versionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(versionList);

        versionDetailsLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionDetailsLabel.setText("VERSION DETAIL");

        versionEntryIDLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionEntryIDLabel.setText("Entry ID:");

        versionEntryID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionEntryID.setText("ID");

        versionIDLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionIDLabel.setText("Version:");

        versionID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionID.setText("ID");

        versionCreatedLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionCreatedLabel.setText("Created:");

        versionCreated.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionCreated.setText("date");

        versionAuthorLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionAuthorLabel.setText("Author:");

        versionAuthor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionAuthor.setText("author");

        versionTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionTitleLabel.setText("Title:");

        versionTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionTitle.setText("title");

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setEnabled(false);

        versionContents.setColumns(20);
        versionContents.setRows(5);
        jScrollPane2.setViewportView(versionContents);

        versionStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionStatusLabel.setText("Status:");

        versionStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        versionStatus.setText("status");

        setActiveButton.setText("Set active");
        setActiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setActiveButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(versionListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(versionDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionAuthorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionCreatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionCreated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionEntryIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionEntryID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(versionStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(setActiveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versionListLabel)
                    .addComponent(versionDetailsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(versionEntryIDLabel)
                            .addComponent(versionEntryID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(versionIDLabel)
                            .addComponent(versionID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(versionCreatedLabel)
                            .addComponent(versionCreated))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(versionAuthorLabel)
                            .addComponent(versionAuthor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(versionTitleLabel)
                            .addComponent(versionTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(versionStatusLabel)
                            .addComponent(versionStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setActiveButton)
                            .addComponent(deleteButton)
                            .addComponent(closeButton)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setActiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setActiveButtonActionPerformed
        GUIAux.throwNotImplemetedMessage(this);
    }//GEN-LAST:event_setActiveButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        GUIAux.throwNotImplemetedMessage(this);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // close this dialog
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton setActiveButton;
    private javax.swing.JLabel versionAuthor;
    private javax.swing.JLabel versionAuthorLabel;
    private javax.swing.JTextArea versionContents;
    private javax.swing.JLabel versionCreated;
    private javax.swing.JLabel versionCreatedLabel;
    private javax.swing.JLabel versionDetailsLabel;
    private javax.swing.JLabel versionEntryID;
    private javax.swing.JLabel versionEntryIDLabel;
    private javax.swing.JLabel versionID;
    private javax.swing.JLabel versionIDLabel;
    private javax.swing.JList versionList;
    private javax.swing.JLabel versionListLabel;
    private javax.swing.JLabel versionStatus;
    private javax.swing.JLabel versionStatusLabel;
    private javax.swing.JLabel versionTitle;
    private javax.swing.JLabel versionTitleLabel;
    // End of variables declaration//GEN-END:variables

    private void finalizeComponents() {
        // listener for kb items list browsing
        // http://stackoverflow.com/a/5609251
        MouseListener mouseListener = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // get currently selected index entry
                if (versionList.getSelectedIndex() < 0) {
                    versionList.setSelectedIndex(0);
                }
                // extract DB ID from what is displayed
                String selectedItem = (String) versionList.getSelectedValue();
                String selectedID = selectedItem.substring(1, selectedItem.indexOf(' '));
                // load entry data from db
                currentEntry = (KBEntry)DBHandler.getSingleObject(
                        "FROM KBEntry WHERE id='" + selectedID + "'");
                // fill gui elements with data
                loadVersionDetails();
            }
        };
        versionList.addMouseListener(mouseListener);
        
        // set window title
        this.setTitle("VSEgraf - User management");
    }

    private void loadVersionDetails() {
        // fill GUI with current version details
        versionEntryID.setText(String.valueOf(currentEntry.getKbOrigID()));
        versionID.setText(String.valueOf(currentEntry.getKbID()));
        versionCreated.setText(currentEntry.getEntryCreated());
        versionAuthor.setText(LogicAux.getUserName(currentEntry.getEntryAuthor()));
        versionTitle.setText(currentEntry.getEntryTitle());
        versionContents.setText(currentEntry.getEntryBody());
        setStatusLabel(currentEntry.getEntryStatus());
    }
    
    // TODO check if delete
    private void infoMessage(String message) {
        // display simple message for user
        JOptionPane.showMessageDialog(this, message,
                "VSEGraf - user management", JOptionPane.INFORMATION_MESSAGE);
    }

    private void getVersionList(int origID) {
        // GET ENTRIES FROM DB AND TURN THEM INTO LIST 
        // get all versions with same "original" ID
        // order them by "system" ID (desc) - highest 
        DefaultListModel listModel = new DefaultListModel();
        Iterator itr = DBHandler.getListOfObjects(
                "FROM KBEntry WHERE orig_id='" + origID + "' ORDER BY id DESC");
        while (itr.hasNext()) {
            KBEntry entry = (KBEntry) itr.next();
            // build string to display
            // version id + entry title + entry status
            String result = "#" + entry.getKbID() + " " + entry.getEntryTitle();
            switch (entry.getEntryStatus()) {
                case 1:
                    result += " [A]"; // active version
                    break;
                case -1:
                    result += " [D]"; // deleted version
                    break;
                    
            }
            listModel.addElement(result);
        }
        // SET THIS LIST FOR INDEX OF ENTRIES
        versionList.setModel(listModel);
    }

    private void setStatusLabel(int status) {
        // set what is displayed in status label
        // depends on current entry status
        switch (status) {
            case 1:
                versionStatus.setText("ACTIVE");
                versionStatus.setForeground(Color.green);
                break;
            case 0:
                versionStatus.setText("OBSOLETE");
                versionStatus.setForeground(Color.orange);
                break;
            case -1:
                versionStatus.setText("DELETED");
                versionStatus.setForeground(Color.red);
                break;
        }
    }      
}
